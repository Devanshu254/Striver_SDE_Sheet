Q1. Reverse a liniked list.
Solution -> 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = NULL;
        ListNode* curr = head;
        while(curr != NULL){
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};

Q2. Find middle of linked list.
Solution -> 
ListNode* middleNode(ListNode* head) {
        ListNode* curr = head;
        int count = 0;
        while(curr != NULL){
            curr = curr->next;
            count++;
        }
        curr = head;
        int middle = 0;
        if(count %2==0){
            middle = count/2;
        }else{
            middle = count/2;
        }
        for(int i=0;i<middle;i++){
            curr = curr->next;
        }
        return curr;
    }

Q3. Merge 2 sorted linked list.
Solution -> 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;
        ListNode* head = NULL;
        ListNode* tail = NULL;
        if(list1->val <= list2->val){
            head = tail = list1;
            list1 = list1->next;
        }else{
            head = tail = list2;
            list2 = list2->next;
        }
        while(list1 != NULL && list2 != NULL){
            if(list1->val <= list2->val){
                tail->next = list1;
                tail = list1;
                list1 = list1->next;
            }else{
                tail->next = list2;
                tail = list2;
                list2 = list2->next;
            }
        }
        if(list1 == NULL) tail->next = list2;
        else tail->next = list1;
        return head;
    }
};

Q4. Remove nth node from the end of list.
solution -> 
ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* start = new ListNode();
        start->next = head;
        ListNode* slow = start;
        ListNode* fast = start;
        for(int i=0;i<n;i++){
            fast = fast->next;
        }
        while(fast->next != NULL){
            slow = slow->next;
            fast = fast->next;
        }
        slow->next = slow->next->next;
        return start->next;
    }

Q5. Add 2 numbers.
Solution -> 
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode();
        ListNode* temp = dummy;
        int carry = 0;
        while(l1 != NULL || l2 != NULL || carry){
            int sum = 0;
            if(l1 != NULL){
                sum = sum + l1->val;
                l1 = l1->next;
            }
            if(l2 != NULL){
                sum = sum + l2->val;
                l2 = l2->next;
            }
            sum = sum + carry;
            carry = sum/10;
            ListNode* node = new ListNode(sum%10);
            temp->next = node;
            temp = temp->next;
        }
        return dummy->next;
    }
};

Q6. Delete the head of the linkedlist. 

There is a singly-linked list head and we want to delete a node node in it.
You are given the node to be deleted node. You will not be given access to the first node of head.

Solution -> 

class Solution {
public:
    void deleteNode(ListNode* node) {
        node->val = node->next->val;
        node->next = node->next->next;
    }
};

Q7. Intersection point of 2 linked list.
Solution -> 
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == NULL || headB == NULL){
            return NULL;
        }
        ListNode* a = headA;
        ListNode* b = headB;
        while(a != b){
            a = a == NULL ? headB : a->next;
            b = b == NULL ? headA : b->next;
        }
        return a;
    }
};


Q8. Linked list cycle. Flyod cycle detection method.
Solution -> 
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast){
                return true;
            }
        }
        return false;
    }
};

Q9. Reverse Nodes in group of k elements.
Solution -> 
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* curr = head;
        int count = 0;
        while(curr != NULL && count < k){
            curr = curr->next;
            count++;
        }
        if(count == k){
            curr = head;
            ListNode* prev = NULL;
            ListNode* next = NULL;
            int count = 0;
            while(curr != NULL && count < k){
                next = curr->next;
                curr->next = prev;
                prev = curr;
                curr = next;
                count++;
            }
            if(next != NULL){
                ListNode* rest = reverseKGroup(next, k);
                head->next = rest;
            }
            return prev;
        }else return head;
    }
};

Q10. Check whether the linked list is palindrom or not.
Solution -> 
class Solution {
    ListNode* reverseList(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        while(curr != NULL){
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        if(head == NULL) return true;
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        ListNode* rev = reverseList(slow->next);
        ListNode* curr = head;
        while(rev != NULL){
            if(rev->val != curr->val){
                return false;
            }
            rev = rev->next;
            curr = curr->next;
        }
        return true;
    }
};
Q11. LinkedList Cycle 2.
Solution -> 
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head == NULL || head->next == NULL){
            return NULL;
        }
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* entry = head;
        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast){
                while(slow != entry){
                    slow = slow->next;
                    entry = entry->next;
                }
                return entry;
            }
        }
        return NULL;
    }
};

Q12. Flatten the linked list.
Solution -> 
Node* mergeTwoLists(Node* a ,Node* b){
    Node* temp = new Node(0);
    Node* res = temp;
    
    while(a != NULL && b != NULL){
        if(a->data < b->data){
            temp->bottom = a;
            temp = temp->bottom;
            a = a->bottom;
        }else{
            temp->bottom = b;
            temp = temp->bottom;
            b = b->bottom;
        }
        if(a) temp->bottom = a;
        else temp->bottom = b;
    }
    return res->bottom;
}
Node *flatten(Node *root)
{
   // Your code here
   if(root == NULL || root->next == NULL){
       return root;
   }
   root->next = flatten(root->next);
   root = mergeTwoLists(root, root->next);
   
   return root;
}

Q13. Rotate List.
Solution -> 
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next || k == 0) return head;
        ListNode* curr = head;
        int count = 1;
        while(curr->next != NULL){
            curr = curr->next;
            count++;
        }
        curr->next = head;
        k = k%count;
        k = count-k;
        while(k--) curr = curr->next;
        head = curr->next;
        curr->next = NULL;
        return head;
    }
};
