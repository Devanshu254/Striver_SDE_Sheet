Q1. 3Sum.
Solution -> 
vector<vector<int>> findTriplets(vector<int>arr, int n, int K) {
    vector<vector<int>> ans;
    sort(arr.begin(), arr.end());
    for(int i=0;i<n;i++){
        if(i>0 && arr[i] == arr[i-1]) continue;
        int j = i+1;
        int k = n-1;
        while(j<k){
            int sum = arr[i]+arr[j]+arr[k];
            if(sum < K) {
                j++;
            }
            else if(sum > K) {
                k--;    
            }
            else {
                vector<int> temp = {arr[i], arr[j], arr[k]};
                ans.push_back(temp);
                j++;
                k--;
                while(j<k && arr[j] == arr[j-1]) j++;
                while(j<k && arr[k] == arr[k+1]) k--;
            }
        }
    }
    return ans;
}
Q2. Rotate linked list.
Solution ->
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next || k==0) return head;
        int count = 1;
        ListNode* curr = head;
        while(curr->next != NULL){
            curr = curr->next;
            count++;
        }
        curr->next = head;
        k = k%count;
        k = count - k;
        while(k--) curr = curr->next;
        head = curr->next;
        curr->next = NULL;
        return head; 
    }
};
